
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.Signature;
import java.security.SignatureException;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPublicKeySpec;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.Base64.Decoder;
import java.io.File;
/**
 *
 * @author mallik
 */
public class App extends javax.swing.JFrame {

    //private JavaCardHostApp host;
    private JCIDEHelper host;
    private JFrame frame;
    static int counter;
    final static byte Wallet_CLA = (byte) 0xB0;
    final static byte VERIFY = (byte) 0x20;
    final static byte CREDIT = (byte) 0x30;
    final static byte DEBIT = (byte) 0x40;
    final static byte REGIST_CARD = (byte) 0x50;
    final static byte UNBLOCK = (byte) 0x60;
    final static byte CHANGE_PASS = (byte) 0x70;
    final static byte INS_GET_CARD_DATA = (byte) 0x13;
    
    private ArrayList<UserModel> users = new ArrayList<UserModel>();
    private UserModel user = new UserModel("MB102321908", "1234", "images.jpg", "images.jpg", 
            "Pham Doan Hieu", "Thanh Xuan Ha Noi", (byte) 1, "Ha Noi", " Viet Nam", 
            "05/04/2000", null, null, "", 0);
    
    private UserModel tempUser = user;
    private String pathFileImageAvatar = "";
    private String pathFileImageFingerPrint = "";
    private boolean isConnected = false;
    private final byte[] emptyData = {(byte)0x00};
    /**
     * Creates new form GUIGeldAutomat
     */
    public App() {
        initComponents();
        counter = 3;
        //host = new JavaCardHostApp();
        
        host = new JCIDEHelper();

        pnlMain.setVisible(false);
        pnlThongTin.setVisible(false);
        pnlDoiMaPin.setVisible(false);

        this.setSize(675, 600);
        hideAndShowPnl(pnlVerifiedPin);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroupSex = new javax.swing.ButtonGroup();
        pnlApplet = new javax.swing.JPanel();
        txtCLA = new javax.swing.JTextField();
        lblCLA = new javax.swing.JLabel();
        txtINS = new javax.swing.JTextField();
        lblINS = new javax.swing.JLabel();
        txtP1 = new javax.swing.JTextField();
        txtP2 = new javax.swing.JTextField();
        txtLc = new javax.swing.JTextField();
        txtLe = new javax.swing.JTextField();
        txtCommand = new javax.swing.JTextField();
        lblP1 = new javax.swing.JLabel();
        lblP2 = new javax.swing.JLabel();
        lblLc = new javax.swing.JLabel();
        lblDataCommand = new javax.swing.JLabel();
        lblLe = new javax.swing.JLabel();
        btnConnectToCard = new javax.swing.JButton();
        lblResponseAPDU = new javax.swing.JLabel();
        txtRespondse = new javax.swing.JTextField();
        txtSW1 = new javax.swing.JTextField();
        txtSW2 = new javax.swing.JTextField();
        lblSW2 = new javax.swing.JLabel();
        lblSW1 = new javax.swing.JLabel();
        lblDataResponse = new javax.swing.JLabel();
        lblCommandAPDU = new javax.swing.JLabel();
        btnDisconnect = new javax.swing.JButton();
        txtConnectStatus = new javax.swing.JTextField();
        txtDisconnectStatus = new javax.swing.JTextField();
        btnUnlockCard = new javax.swing.JButton();
        pnlVerifiedPin = new javax.swing.JPanel();
        lblPin = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        btnLogIn = new javax.swing.JButton();
        btnRegisterCard = new javax.swing.JButton();
        pnlMain = new javax.swing.JPanel();
        btnEditInfor = new javax.swing.JButton();
        btnChangePin = new javax.swing.JButton();
        btnLogOut = new javax.swing.JButton();
        pnlThongTin = new javax.swing.JPanel();
        lblFullname = new javax.swing.JLabel();
        txtFullname = new javax.swing.JTextField();
        txtBirthday = new javax.swing.JTextField();
        lblBirthday = new javax.swing.JLabel();
        lblSex = new javax.swing.JLabel();
        lblRegion = new javax.swing.JLabel();
        txtNational = new javax.swing.JTextField();
        jButtonSaveInformation = new javax.swing.JButton();
        btnBack_pnlThongTin = new javax.swing.JButton();
        imgAvatar = new javax.swing.JLabel();
        lblCardId = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        txtRegion = new javax.swing.JTextField();
        lblNational = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblNote = new javax.swing.JLabel();
        txtNote = new javax.swing.JTextField();
        imgFingerPrint = new javax.swing.JLabel();
        lblReleaseDate = new javax.swing.JLabel();
        lblExpiredDate = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        Amount = new javax.swing.JLabel();
        checkBoxMale = new javax.swing.JCheckBox();
        checkBoxFemale = new javax.swing.JCheckBox();
        txtReleaseDate = new javax.swing.JLabel();
        txtExpiredDate = new javax.swing.JLabel();
        btnBrowserAvatar = new javax.swing.JButton();
        btnBrowserFingerPrinter = new javax.swing.JButton();
        txtCardId = new javax.swing.JTextField();
        pnlDoiMaPin = new javax.swing.JPanel();
        lblCurrentPin = new javax.swing.JLabel();
        lblChangePin = new javax.swing.JLabel();
        lblConfirmPin = new javax.swing.JLabel();
        btnSaveMaPin = new javax.swing.JButton();
        btnBack_pnlDoiMaPin = new javax.swing.JButton();
        txtCurrentPin = new javax.swing.JPasswordField();
        txtNewPin = new javax.swing.JPasswordField();
        txtConfirmPin = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlApplet.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Internal Process", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        pnlApplet.setMaximumSize(new java.awt.Dimension(800, 400));
        pnlApplet.setPreferredSize(new java.awt.Dimension(700, 334));

        lblCLA.setText("CLA");

        lblINS.setText("INS");

        lblP1.setText("P1");

        lblP2.setText("P2");

        lblLc.setText("Lc");

        lblDataCommand.setText("Data Field");

        lblLe.setText("Le");

        btnConnectToCard.setText("Connect to card");
        btnConnectToCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectToCardActionPerformed(evt);
            }
        });

        lblResponseAPDU.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblResponseAPDU.setText("Response APDU");

        txtRespondse.setMaximumSize(new java.awt.Dimension(600, 600));
        txtRespondse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRespondseActionPerformed(evt);
            }
        });

        lblSW2.setText("SW2");

        lblSW1.setText("SW1");

        lblDataResponse.setText("Data Field");

        lblCommandAPDU.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblCommandAPDU.setText("Command APDU");

        btnDisconnect.setText("Disconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        txtConnectStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtConnectStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConnectStatusActionPerformed(evt);
            }
        });

        txtDisconnectStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnUnlockCard.setText("Unblock Card");
        btnUnlockCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnlockCardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAppletLayout = new javax.swing.GroupLayout(pnlApplet);
        pnlApplet.setLayout(pnlAppletLayout);
        pnlAppletLayout.setHorizontalGroup(
            pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAppletLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlAppletLayout.createSequentialGroup()
                        .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblCLA)
                            .addComponent(txtCLA, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblINS)
                            .addComponent(txtINS, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblP1)
                            .addComponent(txtP1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblP2)
                            .addComponent(txtP2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblLc)
                            .addComponent(txtLc, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataCommand)
                            .addComponent(txtCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblLe)
                            .addComponent(txtLe, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlAppletLayout.createSequentialGroup()
                        .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataResponse)
                            .addComponent(txtRespondse, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblSW1)
                            .addComponent(txtSW1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txtSW2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSW2)))
                    .addGroup(pnlAppletLayout.createSequentialGroup()
                        .addComponent(btnUnlockCard)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAppletLayout.createSequentialGroup()
                                .addComponent(btnDisconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDisconnectStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlAppletLayout.createSequentialGroup()
                                .addComponent(btnConnectToCard, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtConnectStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlAppletLayout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(lblCommandAPDU))
                    .addGroup(pnlAppletLayout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(lblResponseAPDU)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlAppletLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtSW1, txtSW2});

        pnlAppletLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtConnectStatus, txtDisconnectStatus});

        pnlAppletLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCLA, txtINS, txtP1, txtP2});

        pnlAppletLayout.setVerticalGroup(
            pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAppletLayout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCLA)
                    .addComponent(lblINS)
                    .addComponent(lblP1)
                    .addComponent(lblP2)
                    .addComponent(lblLc)
                    .addComponent(lblDataCommand)
                    .addComponent(lblLe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCLA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtINS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCommandAPDU, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSW2)
                    .addComponent(lblSW1)
                    .addComponent(lblDataResponse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtSW1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSW2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRespondse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblResponseAPDU)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConnectToCard)
                    .addComponent(txtConnectStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUnlockCard))
                .addGap(18, 18, 18)
                .addGroup(pnlAppletLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDisconnect)
                    .addComponent(txtDisconnectStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pnlAppletLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtCLA, txtINS, txtP1, txtP2, txtSW1, txtSW2});

        pnlAppletLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtConnectStatus, txtDisconnectStatus});

        pnlVerifiedPin.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Căn cước công dân", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        pnlVerifiedPin.setPreferredSize(new java.awt.Dimension(700, 334));

        lblPin.setText("Mã pin");

        btnLogIn.setText("Đăng nhập");
        btnLogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogInActionPerformed(evt);
            }
        });

        btnRegisterCard.setText("Đăng ký thẻ");
        btnRegisterCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterCardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlVerifiedPinLayout = new javax.swing.GroupLayout(pnlVerifiedPin);
        pnlVerifiedPin.setLayout(pnlVerifiedPinLayout);
        pnlVerifiedPinLayout.setHorizontalGroup(
            pnlVerifiedPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVerifiedPinLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlVerifiedPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlVerifiedPinLayout.createSequentialGroup()
                        .addComponent(btnRegisterCard, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLogIn))
                    .addGroup(pnlVerifiedPinLayout.createSequentialGroup()
                        .addComponent(lblPin)
                        .addGap(25, 25, 25)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlVerifiedPinLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnLogIn, btnRegisterCard});

        pnlVerifiedPinLayout.setVerticalGroup(
            pnlVerifiedPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVerifiedPinLayout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addGroup(pnlVerifiedPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlVerifiedPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogIn)
                    .addComponent(btnRegisterCard))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        pnlVerifiedPinLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnLogIn, btnRegisterCard});

        pnlMain.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Căn cước công dân", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        pnlMain.setPreferredSize(new java.awt.Dimension(700, 334));

        btnEditInfor.setText("Cập nhật Thông tin");
        btnEditInfor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditInforActionPerformed(evt);
            }
        });

        btnChangePin.setText("Đổi mã pin");
        btnChangePin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePinActionPerformed(evt);
            }
        });

        btnLogOut.setText("Đăng xuất");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEditInfor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnChangePin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMainLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnChangePin, btnEditInfor, btnLogOut});

        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addComponent(btnEditInfor)
                .addGap(18, 18, 18)
                .addComponent(btnChangePin)
                .addGap(18, 18, 18)
                .addComponent(btnLogOut)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pnlMainLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnChangePin, btnEditInfor, btnLogOut});

        pnlThongTin.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin người dùng", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        pnlThongTin.setMaximumSize(new java.awt.Dimension(800, 400));
        pnlThongTin.setPreferredSize(new java.awt.Dimension(700, 334));

        lblFullname.setText("Họ và tên");

        lblBirthday.setText("Ngày sinh");

        lblSex.setText("Giới tính");

        lblRegion.setText("Quê quán");

        jButtonSaveInformation.setText("Lưu thông tin");
        jButtonSaveInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveInformationActionPerformed(evt);
            }
        });

        btnBack_pnlThongTin.setText("Trở về");
        btnBack_pnlThongTin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBack_pnlNapTienActionPerformed(evt);
            }
        });

        imgAvatar.setBackground(new java.awt.Color(0, 255, 204));
        imgAvatar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images.png"))); // NOI18N

        lblCardId.setText("Số CCCD");

        lblAddress.setText("Địa chỉ");

        lblNational.setText("Quốc tịch");

        lblNote.setText("Đặc điểm nhận dạng");

        imgFingerPrint.setBackground(new java.awt.Color(0, 255, 204));
        imgFingerPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images.png"))); // NOI18N

        lblReleaseDate.setText("Ngày phát hành:");

        lblExpiredDate.setText("Hiệu lực đến:");

        txtAmount.setEditable(false);
        txtAmount.setEnabled(false);

        Amount.setText("Số dư TK");

        buttonGroupSex.add(checkBoxMale);
        checkBoxMale.setSelected(true);
        checkBoxMale.setText("Nam");
        checkBoxMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMaleActionPerformed(evt);
            }
        });

        buttonGroupSex.add(checkBoxFemale);
        checkBoxFemale.setText("Nữ");

        txtReleaseDate.setText("01/01/2001");

        txtExpiredDate.setText("01/01/2016");

        btnBrowserAvatar.setText("Ảnh");
        btnBrowserAvatar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowserAvatarActionPerformed(evt);
            }
        });

        btnBrowserFingerPrinter.setText("Vân tay");
        btnBrowserFingerPrinter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowserFingerPrinterActionPerformed(evt);
            }
        });

        txtCardId.setEditable(false);
        txtCardId.setEnabled(false);

        javax.swing.GroupLayout pnlThongTinLayout = new javax.swing.GroupLayout(pnlThongTin);
        pnlThongTin.setLayout(pnlThongTinLayout);
        pnlThongTinLayout.setHorizontalGroup(
            pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNote, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlThongTinLayout.createSequentialGroup()
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblReleaseDate)
                            .addComponent(lblExpiredDate, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtReleaseDate)
                            .addComponent(txtExpiredDate)))
                    .addComponent(txtNote, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlThongTinLayout.createSequentialGroup()
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btnBrowserAvatar)
                            .addComponent(imgAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btnBrowserFingerPrinter)
                            .addComponent(imgFingerPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCardId)
                    .addComponent(Amount)
                    .addComponent(lblAddress)
                    .addComponent(lblRegion)
                    .addComponent(lblNational)
                    .addComponent(lblBirthday)
                    .addComponent(lblFullname, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSex))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(txtRegion, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(txtNational, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(txtBirthday, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(txtFullname, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(txtAmount)
                    .addGroup(pnlThongTinLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(checkBoxMale)
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxFemale))
                    .addComponent(txtCardId))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlThongTinLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSaveInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(btnBack_pnlThongTin, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlThongTinLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBrowserAvatar, btnBrowserFingerPrinter});

        pnlThongTinLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {imgAvatar, imgFingerPrint});

        pnlThongTinLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAddress, txtBirthday, txtCardId, txtFullname, txtNational, txtRegion});

        pnlThongTinLayout.setVerticalGroup(
            pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlThongTinLayout.createSequentialGroup()
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txtCardId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCardId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblFullname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblBirthday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblSex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkBoxMale)
                            .addComponent(checkBoxFemale))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNational, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNational))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(txtRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(lblAddress)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(Amount)
                            .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE))
                    .addGroup(pnlThongTinLayout.createSequentialGroup()
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(imgAvatar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imgFingerPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btnBrowserAvatar)
                            .addComponent(btnBrowserFingerPrinter))
                        .addGap(10, 10, 10)
                        .addComponent(lblNote)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlThongTinLayout.createSequentialGroup()
                                .addComponent(lblReleaseDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblExpiredDate))
                            .addGroup(pnlThongTinLayout.createSequentialGroup()
                                .addComponent(txtReleaseDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtExpiredDate)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)))
                .addGroup(pnlThongTinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButtonSaveInformation)
                    .addComponent(btnBack_pnlThongTin))
                .addContainerGap())
        );

        pnlThongTinLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBrowserAvatar, btnBrowserFingerPrinter});

        pnlThongTinLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtAddress, txtBirthday, txtCardId, txtFullname, txtNational, txtRegion});

        pnlDoiMaPin.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Đổi mã pin", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Tahoma", 1, 18))); // NOI18N
        pnlDoiMaPin.setMaximumSize(new java.awt.Dimension(800, 400));
        pnlDoiMaPin.setPreferredSize(new java.awt.Dimension(700, 334));

        lblCurrentPin.setText("Mã pin hiện tại");

        lblChangePin.setText("Mã pin thay đổi");

        lblConfirmPin.setText("Xác nhận mã pin");

        btnSaveMaPin.setText("Lưu");
        btnSaveMaPin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMaPinActionPerformed(evt);
            }
        });

        btnBack_pnlDoiMaPin.setText("Trở về");
        btnBack_pnlDoiMaPin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBack_pnlNapTienActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDoiMaPinLayout = new javax.swing.GroupLayout(pnlDoiMaPin);
        pnlDoiMaPin.setLayout(pnlDoiMaPinLayout);
        pnlDoiMaPinLayout.setHorizontalGroup(
            pnlDoiMaPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDoiMaPinLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlDoiMaPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblChangePin)
                    .addComponent(lblCurrentPin)
                    .addComponent(lblConfirmPin))
                .addGap(20, 20, 20)
                .addGroup(pnlDoiMaPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtConfirmPin)
                    .addComponent(txtNewPin)
                    .addComponent(txtCurrentPin))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDoiMaPinLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSaveMaPin)
                .addGap(31, 31, 31)
                .addComponent(btnBack_pnlDoiMaPin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDoiMaPinLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBack_pnlDoiMaPin, btnSaveMaPin});

        pnlDoiMaPinLayout.setVerticalGroup(
            pnlDoiMaPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDoiMaPinLayout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addGroup(pnlDoiMaPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblCurrentPin)
                    .addComponent(txtCurrentPin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(pnlDoiMaPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblChangePin)
                    .addComponent(txtNewPin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(pnlDoiMaPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblConfirmPin)
                    .addComponent(txtConfirmPin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(pnlDoiMaPinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveMaPin)
                    .addComponent(btnBack_pnlDoiMaPin))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pnlDoiMaPinLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBack_pnlDoiMaPin, btnSaveMaPin});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
            .addComponent(pnlThongTin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
            .addComponent(pnlDoiMaPin, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
            .addComponent(pnlApplet, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
            .addComponent(pnlVerifiedPin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(pnlVerifiedPin, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(pnlThongTin, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(pnlDoiMaPin, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(pnlApplet, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogInActionPerformed
        boolean verifyCardResult = true; //Mock Verify card
        
        if (!verifyCardResult) {
            JOptionPane.showMessageDialog(null,
                    "Xác thực thẻ không thành công",
                    "Thông báo",
                    JOptionPane.ERROR_MESSAGE);
        } else if (!isConnected){
            JOptionPane.showMessageDialog(null,
                    "Xin hãy kết nối với thẻ",
                    "Thông báo",
                    JOptionPane.ERROR_MESSAGE);
        }else if(counter == 0){
            JOptionPane.showMessageDialog(null,
                    "Thẻ của bạn đã bị khóa",
                    "Thông báo",
                    JOptionPane.ERROR_MESSAGE);
        }else{
            char[] ip = txtPassword.getPassword();
            if (verifyPin(ip)){
                counter = 3;
                hideAndShowPnl(pnlMain);
                txtPassword.setText(null);
                
                byte[] data = readDataOnCard("", INS_GET_CARD_DATA);
                setDataInUserTemp(data);
                
                JOptionPane.showMessageDialog(null,
                        "Đăng nhập thành công",
                        "Thông báo",
                        JOptionPane.INFORMATION_MESSAGE);      
            }else{
                counter --;
                if (counter == 0){
                    JOptionPane.showMessageDialog(null,
                            "Mã pin không chính xác. Thẻ của bạn đã bị khóa",
                            "Thông báo",
                            JOptionPane.ERROR_MESSAGE);
                }else {
                    JOptionPane.showMessageDialog(null,
                            "Mã pin không chính xác. Bạn còn " + counter + " lần thử lại",
                            "Thông báo",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnLogInActionPerformed

    private boolean verifyPin(char[] ip){
        
        byte[] data_v = new byte[ip.length];
//
        byte[] cmnds_v = {Wallet_CLA, VERIFY, 0, 0};

        for (int ipIndx = 0; ipIndx < ip.length; ipIndx++) {
            data_v[ipIndx] = (byte) (ip[ipIndx] & 0x0F);
        }

        setTheCommandAPDUOnGUI(cmnds_v, data_v, data_v.length, 0);
        
        try{
        host.sendApdu(cmnds_v, data_v);
//            sendAndReceiveDataOnCard(ip.toString().getBytes(), VERIFY);
        }catch (Exception e){
        }
        
        String sw = Integer.toHexString(host.getStatusWord());
        return sw.matches("9000");
    }
    
        private boolean changePass(char[] ip){
        
            byte[] data_v = new byte[ip.length];
    //
            byte[] cmnds_v = {Wallet_CLA, CHANGE_PASS, 0, 0};

            for (int ipIndx = 0; ipIndx < ip.length; ipIndx++) {
                data_v[ipIndx] = (byte) (ip[ipIndx] & 0x0F);
            }

            setTheCommandAPDUOnGUI(cmnds_v, data_v, data_v.length, 0);

            try{
            host.sendApdu(cmnds_v, data_v);
    //            sendAndReceiveDataOnCard(ip.toString().getBytes(), VERIFY);
            }catch (Exception e){
            }

            String sw = Integer.toHexString(host.getStatusWord());
            return sw.matches("9000");
        }
    
    
    private void btnEditInforActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditInforActionPerformed
        this.resize(675, 720);
        hideAndShowPnl(pnlThongTin);
        setUserInfoOnGUI();
    }//GEN-LAST:event_btnEditInforActionPerformed
    
    private void btnChangePinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePinActionPerformed
        // TODO add your handling code here:
        hideAndShowPnl(pnlDoiMaPin);
        setUserInfoOnGUI();
    }//GEN-LAST:event_btnChangePinActionPerformed

    private void btnRegisterCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterCardActionPerformed
        // TODO add your handling code here:
        if(isConnected){
                UserModel newUser = new UserModel();
                
                Date newReleaseDate = new Date();
                Date newExpiredDate = new Date();
                
                newExpiredDate.setYear(newReleaseDate.getYear() + 15);
                
                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                String reDate = formatter.format(newReleaseDate);
                String exDate = formatter.format(newExpiredDate);
                
                String cardNumber = String.format("%040d", new BigInteger(UUID.randomUUID().toString().replace("-", ""), 16));
                
                newUser.setCardId(cardNumber);
                newUser.setPin("1234");
                newUser.setFullname("New User");
                newUser.setExpiredDate(exDate);
                newUser.setReleaseDate(reDate);
                
                users.add(newUser);
                
                writeDataToCard(newUser, REGIST_CARD);
                
                counter = 3;
                JOptionPane.showMessageDialog(null,
                        "Thẻ đã được đăng ký mới với mật khẩu là 1234, xin hãy đăng nhập để sửa lại thông tin",
                        "Thông báo",
                        JOptionPane.INFORMATION_MESSAGE);
        }else{
             JOptionPane.showMessageDialog(null,
                    "Xin hãy kết nối với thẻ",
                    "Thông báo",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnRegisterCardActionPerformed

    private void btnBrowserFingerPrinterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowserFingerPrinterActionPerformed
        // TODO add your handling code here:
        String path = browseImageFile();
        if (path!=null){
            pathFileImageFingerPrint = path;
            setImageFingerPrint(path);
        };
    }//GEN-LAST:event_btnBrowserFingerPrinterActionPerformed

    private void btnBrowserAvatarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowserAvatarActionPerformed
        // TODO add your handling code here:
        String path = browseImageFile();
        if (path!=null){
           pathFileImageAvatar = path;
           setImageAvatar(path);
        };
    }//GEN-LAST:event_btnBrowserAvatarActionPerformed

    private void jButtonSaveInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveInformationActionPerformed
        tempUser.setCardId(txtCardId.getText());
        tempUser.setFullname(txtFullname.getText());
        tempUser.setBirthday(txtBirthday.getText());

        if (checkBoxMale.isSelected()== true) {
            tempUser.setSex((byte)1);
        } else { 
            tempUser.setSex((byte)0);
        }

        tempUser.setNational(txtNational.getText());
        tempUser.setAddress(txtAddress.getText());
        tempUser.setRegion(txtRegion.getText());
        tempUser.setAmount(Long.valueOf(txtAmount.getText()));

        tempUser.setNote(txtNote.getText());
        tempUser.setExpiredDate(txtExpiredDate.getText());
        tempUser.setReleaseDate(txtReleaseDate.getText());
        
        if (pathFileImageAvatar != "")
            tempUser.setAvatarImage(getImageStr(pathFileImageAvatar));
        
        if (pathFileImageFingerPrint != "")
            tempUser.setFingerPrintImage(getImageStr(pathFileImageFingerPrint));

        writeDataToCard(tempUser, REGIST_CARD);

        JOptionPane.showMessageDialog(null,
            "Lưu thông tin thành công",
            "Thông báo",
            JOptionPane.INFORMATION_MESSAGE);
        
        //set new data tempUser
        tempUser.setAvatarImage(pathFileImageAvatar);
        tempUser.setFingerPrintImage(pathFileImageFingerPrint);    
    }//GEN-LAST:event_jButtonSaveInformationActionPerformed

    private void checkBoxMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxMaleActionPerformed

    private void btnSaveMaPinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMaPinActionPerformed
        if(verifyPin(txtCurrentPin.getPassword()) || tempUser.getPin().equals(txtCurrentPin.getText()) ){
            if(!txtNewPin.getText().equals(txtConfirmPin.getText())){
                JOptionPane.showMessageDialog(null,
                        "Mật khẩu và mật khẩu nhắc lại phải trùng nhau",
                        "Thông báo",
                        JOptionPane.INFORMATION_MESSAGE);
            }else{
                System.out.println("curent pin:");
                System.out.println(FunctionUtils.bytesToHexString(txtCurrentPin.getText().getBytes()));
                System.out.println("new pin:");
                System.out.println(FunctionUtils.bytesToHexString(txtNewPin.getText().getBytes()));
//                tempUser.setPin(txtNewPin.getText());

//                       sendAndReceiveDataOnCard(tempUser.toString().getBytes(), REGIST_CARD);
//                sendAndReceiveDataOnCard(txtNewPin.getText().getBytes(), CHANGE_PASS);         
                writeDataToCard(tempUser, REGIST_CARD);
                changePass(txtNewPin.getText().toCharArray());
//                writeDataToCard(txtNewPin.getText(), CHANGE_PASS);
                
                 JOptionPane.showMessageDialog(null,
                        "Đổi mã pin thành công",
                        "Thông báo",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }else{
           JOptionPane.showMessageDialog(null,
                    "Sai mật khẩu xin hãy thử lại",
                    "Thông báo",
                    JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_btnSaveMaPinActionPerformed

    private void btnUnlockCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnlockCardActionPerformed
        System.err.println("Unblock");
        //unblock

        counter = 3;

        byte[] cmnds_u = {Wallet_CLA, UNBLOCK, 0, 0};
        
        byte[] data_u = {(byte) 0x7F};
       
        setTheCommandAPDUOnGUI(cmnds_u, data_u, 0, 0);
        
        host.sendApdu(cmnds_u, data_u);
        host.getStatusWord();
        String sw = Integer.toHexString(host.getStatusWord());
        setTheResponseAPDUOnGUI(sw);

    }//GEN-LAST:event_btnUnlockCardActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        try{
            host.disconnect();
            isConnected = false;
            hideAndShowPnl(pnlVerifiedPin);            
            txtConnectStatus.setText("");
            txtDisconnectStatus.setText("Done");
        } catch(Exception e){}      
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void btnConnectToCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectToCardActionPerformed
        // TODO add your handling code here:
        counter = 3;
        byte[] cmnds = {(byte) 0x00, (byte) 0xA4,(byte) 0x04, (byte)0x00};

        byte[] data = {(byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x00};

        setTheCommandAPDUOnGUI(cmnds, data, data.length, 0);
        
        host.connectCard(cmnds, data);
        String sw = Integer.toHexString(host.getStatusWord());
        System.out.println("getStatusWord = "  + sw);
        setTheResponseAPDUOnGUI(sw);
        if ("9000".equals(sw)){
            isConnected = true;           
            txtConnectStatus.setText("Done");
            txtDisconnectStatus.setText("");
        }else{
            JOptionPane.showMessageDialog(null,
                "Kết nối với thẻ không thành công. ",
                "Thông báo",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConnectToCardActionPerformed

    private void btnBack_pnlNapTienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBack_pnlNapTienActionPerformed
        this.setSize(675, 600);
        hideAndShowPnl(pnlMain);
    }//GEN-LAST:event_btnBack_pnlNapTienActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(host != null){
            try{
              host.disconnect();
            } catch(Exception ex){}
        }
    }//GEN-LAST:event_formWindowClosing

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        tempUser = new UserModel();
        hideAndShowPnl(pnlVerifiedPin);
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void txtRespondseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRespondseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRespondseActionPerformed

    private void txtConnectStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConnectStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtConnectStatusActionPerformed

    private void hideAndShowPnl(javax.swing.JPanel pnlBeShown) {
        pnlThongTin.setVisible(false);
        pnlVerifiedPin.setVisible(false);
        pnlMain.setVisible(false);
        pnlDoiMaPin.setVisible(false);
        
        pnlBeShown.setVisible(true);
    }

    public void setTheCommandAPDUOnGUI(byte[] cmnds, byte[] data, int lc, int le) {
        txtLc.setText(Integer.toHexString(lc));
        txtLe.setText(null);//Le
        txtCommand.setText(byteArrayToHexString(data,true)); 
         txtCLA.setText(String.valueOf(byteToHex(cmnds[0])));
        txtINS.setText(String.valueOf(byteToHex(cmnds[1])));
        txtP1.setText(String.valueOf(byteToHex(cmnds[2])));
        txtP2.setText(String.valueOf(byteToHex(cmnds[3])));
   }


    
    private void writeDataToCard(UserModel user, byte comandCode) {
        String dataUser = user.toString();
        System.out.println(dataUser);
        writeDataToCard(dataUser, comandCode);
    }
    
    private void writeDataToCard(String data, byte comandCode){

        byte[] cmd = {Wallet_CLA, comandCode, 0, 0};

        try {
            byte[] dataBytes = data.getBytes();
            
            setTheCommandAPDUOnGUI(cmd, dataBytes, dataBytes.length, 0); //hien thi apdu cmd len GUI
            System.out.println("dataBytes.length = "+ dataBytes.length);
            host.sendApdu(cmd,dataBytes);
            String sw = Integer.toHexString(host.getStatusWord());
            
            setTheResponseAPDUOnGUI(sw);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private byte[] readDataOnCard(String data, byte commandCode) {
        
        byte[] cmd = {Wallet_CLA, commandCode, 0, 0};
        
        try {
            byte[] dataBytes = data.getBytes();
            setTheCommandAPDUOnGUI(cmd, dataBytes,dataBytes.length, 0);              
            host.sendApdu(cmd, dataBytes);
            String sw = Integer.toHexString(host.getStatusWord());
            setTheResponseAPDUOnGUI(sw);
            return host.getData();
        } catch (Exception e){
        }
        return null;
    }
    
    private String browseImageFile (){
        
        JFileChooser browseImageFile = new JFileChooser();
        
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("IMAGES", "png", "jpg", "jpeg");
        browseImageFile.addChoosableFileFilter(fnef);
        int showOpenDialogue = browseImageFile.showOpenDialog(null);
        
        if (showOpenDialogue == JFileChooser.APPROVE_OPTION){
            File selectedImageFile = browseImageFile.getSelectedFile();
            String selectedImagePath = selectedImageFile.getAbsolutePath();
            JOptionPane.showMessageDialog(null, selectedImagePath);
            
            return selectedImagePath;
        } else return null;
    }

    public void setTheResponseAPDUOnGUI(String sw) {
        txtSW1.setText(sw.substring(0, 2));
        txtSW2.setText(sw.substring(2));

        if (sw.matches("6311")) {
            JOptionPane.showMessageDialog(frame, "PIN VERIFICATION REQUIRED.");
        } else if (sw.matches("6A83")) {
            JOptionPane.showMessageDialog(frame, "INVALID TRANSACTION AMOUNT.");
        } else if (sw.matches("6A84")) {
            JOptionPane.showMessageDialog(frame, "EXCEED MAXIMUM BALANCE .");
        } else if (sw.matches("6A85")) {
            JOptionPane.showMessageDialog(frame, "NEGATIVE BALANCE.");
        }
        
        byte[] dataOut = host.getData();
        
        if (dataOut.length != 0) {
            txtRespondse.setText(byteArrayToHexString(dataOut,true));
        }
    }
    
    private void setUserInfoOnGUI(){
        txtCardId.setText(tempUser.getCardId());
        
        txtFullname.setText(tempUser.getFullname());
        txtAddress.setText(tempUser.getAddress());
        
        txtRegion.setText(tempUser.getRegion());
        txtNational.setText(tempUser.getNational());
        txtBirthday.setText(tempUser.getBirthday());
        txtExpiredDate.setText(tempUser.getExpiredDate());
        txtReleaseDate.setText(tempUser.getReleaseDate());
        txtNote.setText(tempUser.getNote());
        txtAmount.setText(String.valueOf(tempUser.getAmount()));
        
        
        pathFileImageAvatar = tempUser.getAvatarImage();
        pathFileImageFingerPrint = tempUser.getFingerPrintImage();
        
        if (!"".equals(tempUser.getAvatarImage())) 
            setImageAvatar(tempUser.getAvatarImage());
        
        if (!"".equals(tempUser.getFingerPrintImage())) 
            setImageFingerPrint(tempUser.getFingerPrintImage());
        
        if (tempUser.getSex() == 0){
            checkBoxFemale.isSelected();
        }
    }
    
    private void setDataInUserTemp(byte[] data){
        String dotString = hexToString(byteArrayToHexString(data,false));
        String splitString[] = dotString.split("\\.");
        
        String cardId = splitString[0];
     
        for(UserModel user : users){
            if(user.getCardId().equals(cardId)){
                tempUser = user;
                break;
            }
        }
        
        if ( (tempUser.getAvatarImage() == null || tempUser.getAvatarImage() == "")
                && strImageToFile(splitString[2], "images/avatar.jpg")) {
            tempUser.setAvatarImage("images/avatar.jpg");
        }
        
        if ((tempUser.getFingerPrintImage() == null|| tempUser.getFingerPrintImage() == "") 
                && strImageToFile(splitString[3], "images/avatar.jpg")) {
            tempUser.setFingerPrintImage("images/avatar.jpg");
        }
    }
    
    private void setImageAvatar(String path){
        ImageIcon  imageIcon = new ImageIcon(path);
            Image image = imageIcon.getImage().getScaledInstance(imgAvatar.getWidth(),imgAvatar.getHeight(), Image.SCALE_SMOOTH);
            imgAvatar.setIcon(new ImageIcon(image));
    }
    
    private void setImageFingerPrint(String path){
        ImageIcon  imageIcon = new ImageIcon(path);
            Image image = imageIcon.getImage().getScaledInstance(imgFingerPrint.getWidth(),imgFingerPrint.getHeight(), Image.SCALE_SMOOTH);
            imgFingerPrint.setIcon(new ImageIcon(image)); 
    }
    
    public String hexToString(String byteString) {
        byte[] bytes = hexStringToByteArray(byteString);
        String outputString = new String(bytes, StandardCharsets.UTF_8);
        return outputString;
    }
    
    public boolean strImageToFile(String imgStr, String path) { 
        if (imgStr == null) return false;  
        
        
        try {  
            // Decode
            byte[] bytes = Base64.getDecoder().decode(imgStr);

            for (int i = 0; i < bytes.length; ++i) {  
                if (bytes[i] < 0) bytes[i] += 256;  
            }  
            
            // Save image 
            OutputStream out = new FileOutputStream(path);  
            out.write(bytes);  
            out.flush();  
            out.close();  
            
            return true;  
        } catch (Exception e) {  
            return false;  
        }  
    }  
    
    public String getImageStr(String path) {  
        byte[] data = null;  
        // read byte array  
        try {  
            InputStream in = new FileInputStream(path);  
            data = new byte[in.available()];  
            in.read(data);  
            in.close();  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
        // Encode
        return Base64.getEncoder().encodeToString(data);
    }  
   
    public static String byteToHex(byte num) {
        char[] hexDigits = new char[2];
        hexDigits[0] = Character.forDigit((num >> 4) & 0xF, 16);
        hexDigits[1] = Character.forDigit((num & 0xF), 16);
        return new String(hexDigits);
    }
     
    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16));
        }
        return data;
    }    
    
    public static String byteArrayToHexString(byte[] b, boolean spaceHex){
        String result = "";
        for (int i = 0; i < b.length; i++) {
            if (spaceHex){
                result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1) + " ";
            }else{
                result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
            }
        }
        return result;
    }
    
        private byte[] sendAndReceiveDataOnCard(byte[] dataBytes, byte commandCode) {

        byte[] cmd = {Wallet_CLA, commandCode, 0, 0};

        try {
            setTheCommandAPDUOnGUI(cmd, dataBytes,dataBytes.length, 0);              
            host.sendApdu(cmd, dataBytes);
            String sw = Integer.toHexString(host.getStatusWord());
            setTheResponseAPDUOnGUI(sw);
            return host.getData();
        } catch (Exception e){
            System.out.println("Error: "+ e);
        }
        return null;
    }
       
    /**
     * @param args the javaCard line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Amount;
    private javax.swing.JButton btnBack_pnlDoiMaPin;
    private javax.swing.JButton btnBack_pnlThongTin;
    private javax.swing.JButton btnBrowserAvatar;
    private javax.swing.JButton btnBrowserFingerPrinter;
    private javax.swing.JButton btnChangePin;
    private javax.swing.JButton btnConnectToCard;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnEditInfor;
    private javax.swing.JButton btnLogIn;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnRegisterCard;
    private javax.swing.JButton btnSaveMaPin;
    private javax.swing.JButton btnUnlockCard;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroupSex;
    private javax.swing.JCheckBox checkBoxFemale;
    private javax.swing.JCheckBox checkBoxMale;
    private javax.swing.JLabel imgAvatar;
    private javax.swing.JLabel imgFingerPrint;
    private javax.swing.JButton jButtonSaveInformation;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblBirthday;
    private javax.swing.JLabel lblCLA;
    private javax.swing.JLabel lblCardId;
    private javax.swing.JLabel lblChangePin;
    private javax.swing.JLabel lblCommandAPDU;
    private javax.swing.JLabel lblConfirmPin;
    private javax.swing.JLabel lblCurrentPin;
    private javax.swing.JLabel lblDataCommand;
    private javax.swing.JLabel lblDataResponse;
    private javax.swing.JLabel lblExpiredDate;
    private javax.swing.JLabel lblFullname;
    private javax.swing.JLabel lblINS;
    private javax.swing.JLabel lblLc;
    private javax.swing.JLabel lblLe;
    private javax.swing.JLabel lblNational;
    private javax.swing.JLabel lblNote;
    private javax.swing.JLabel lblP1;
    private javax.swing.JLabel lblP2;
    private javax.swing.JLabel lblPin;
    private javax.swing.JLabel lblRegion;
    private javax.swing.JLabel lblReleaseDate;
    private javax.swing.JLabel lblResponseAPDU;
    private javax.swing.JLabel lblSW1;
    private javax.swing.JLabel lblSW2;
    private javax.swing.JLabel lblSex;
    private javax.swing.JPanel pnlApplet;
    private javax.swing.JPanel pnlDoiMaPin;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlThongTin;
    private javax.swing.JPanel pnlVerifiedPin;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtBirthday;
    private javax.swing.JTextField txtCLA;
    private javax.swing.JTextField txtCardId;
    private javax.swing.JTextField txtCommand;
    private javax.swing.JPasswordField txtConfirmPin;
    private javax.swing.JTextField txtConnectStatus;
    private javax.swing.JPasswordField txtCurrentPin;
    private javax.swing.JTextField txtDisconnectStatus;
    private javax.swing.JLabel txtExpiredDate;
    private javax.swing.JTextField txtFullname;
    private javax.swing.JTextField txtINS;
    private javax.swing.JTextField txtLc;
    private javax.swing.JTextField txtLe;
    private javax.swing.JTextField txtNational;
    private javax.swing.JPasswordField txtNewPin;
    private javax.swing.JTextField txtNote;
    private javax.swing.JTextField txtP1;
    private javax.swing.JTextField txtP2;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtRegion;
    private javax.swing.JLabel txtReleaseDate;
    private javax.swing.JTextField txtRespondse;
    private javax.swing.JTextField txtSW1;
    private javax.swing.JTextField txtSW2;
    // End of variables declaration//GEN-END:variables
}
